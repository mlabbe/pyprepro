#!/usr/bin/env python

import os
import re
import sys
import glob

from os.path import join as path_join

MAGIC_STR = '-|- build-edge:'

build_preamble = """# generated by pyprepro.py, an experimental builder

"""

build_rules = {
    # note: this only generates one single output. Writefile() breaks it.
    'grc': {
        'command': 'grc --preserve-preamble $in -o $out',
        'description': 'grain generating $out file from $in',
    }
}

build_filename = './build.ninja'



def get_build_edge_preamble(path):
    with open(path, "rb") as f:
        try:
            head = f.read(512).decode('utf-8')
        except UnicodeDecodeError:
            return None
        return head

def get_in_files_from_preamble_in_line(in_line):
    file_list = []
    for entry in in_line.split():
        file_list.extend(glob.glob(entry))

    return file_list

#
# generate ninja.build
#
f = open(build_filename, "w")
print(build_preamble, file=f)
for rule in build_rules:
    print("rule %s" % rule, file=f)
    for item, value in build_rules[rule].items():
        print("  %s = %s" % (item, value), file=f)

print("\n# end rules\n", file=f)

#
# get scannable files
#
scannable_files = []
for root, dirs, files in os.walk("./"):
    if root.startswith('./.git'):
        continue
    for file in files:
        if file[0] != '.':
            scannable_files.append(path_join(root, file))

re_preamble_keyvalue= re.compile(r'-\|-\s(.+?):\s*(.+)')


#
# scan
#
for path in scannable_files:
    head = get_build_edge_preamble(path)
    if head == None:
        continue

    # this file has a build edge preamble
    if MAGIC_STR in head:

        preamble = {}

        # hacky: will continue amalgamating -|- lines even after a space
        for line in head.split('\n'):
            match = re_preamble_keyvalue.search(line)
            if match:
                preamble[match.group(1)] = match.group(2)

        if 'build-edge' not in preamble or preamble['build-edge'] != 'ninja-rule':
            print("unworkable build edge. pyprepro only does ninja-rule")
            continue

        # generate build edge for this file's preamble
        in_files = get_in_files_from_preamble_in_line(preamble['in'])
        print(f"build {path}: {preamble['rule']} {' '.join(in_files)} | {build_filename}", file=f)


f.close()
